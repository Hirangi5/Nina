{"version":3,"file":"typedefs.js","sources":["../src/interaction.ts","../src/fvm-errors.ts","../src/index.ts"],"sourcesContent":["export enum InteractionTag {\n  UNKNOWN = \"UNKNOWN\",\n  SCRIPT = \"SCRIPT\",\n  TRANSACTION = \"TRANSACTION\",\n  GET_TRANSACTION_STATUS = \"GET_TRANSACTION_STATUS\",\n  GET_ACCOUNT = \"GET_ACCOUNT\",\n  GET_EVENTS = \"GET_EVENTS\",\n  PING = \"PING\",\n  GET_TRANSACTION = \"GET_TRANSACTION\",\n  GET_BLOCK = \"GET_BLOCK\",\n  GET_BLOCK_HEADER = \"GET_BLOCK_HEADER\",\n  GET_COLLECTION = \"GET_COLLECTION\",\n  GET_NETWORK_PARAMETERS = \"GET_NETWORK_PARAMETERS\",\n  SUBSCRIBE_EVENTS = \"SUBSCRIBE_EVENTS\",\n  GET_NODE_VERSION_INFO = \"GET_NODE_VERSION_INFO\",\n}\n\nexport enum InteractionStatus {\n  BAD = \"BAD\",\n  OK = \"OK\",\n}\n\nexport enum TransactionRole {\n  AUTHORIZER = \"authorizer\",\n  PAYER = \"payer\",\n  PROPOSER = \"proposer\",\n}\n\nexport enum InteractionResolverKind {\n  ARGUMENT = \"ARGUMENT\",\n  ACCOUNT = \"ACCOUNT\",\n}\n\nexport interface InteractionAccount {\n  kind: InteractionResolverKind.ACCOUNT\n  tempId: string\n  addr: string | null\n  keyId: number | string | null\n  sequenceNum: number | null\n  signature: string | null\n  signingFunction: any | null\n  resolve: any | null\n  role: {\n    proposer: boolean\n    authorizer: boolean\n    payer: boolean\n    param?: boolean\n  }\n  authorization: any\n}\n\nexport interface Interaction {\n  tag: InteractionTag\n  assigns: Record<string, any>\n  status: InteractionStatus\n  reason: string | null\n  accounts: Record<string, InteractionAccount>\n  params: Record<string, any>\n  arguments: Record<string, any>\n  message: {\n    cadence: string\n    refBlock: string\n    computeLimit: number\n    proposer: string\n    payer: string\n    authorizations: string[]\n    params: Record<string, any>[]\n    arguments: string[]\n  }\n  proposer: string | null\n  authorizations: string[]\n  payer: string[]\n  events: {\n    eventType: string | null\n    start: string | null\n    end: string | null\n    blockIds: string[]\n  }\n  transaction: {\n    id: string | null\n  }\n  block: {\n    id: string | null\n    height: string | null\n    isSealed: boolean | null\n  }\n  account: {\n    addr: string | null\n  }\n  collection: {\n    id: string | null\n  }\n  subscribeEvents: {\n    eventTypes: string[] | null\n    addresses: string[] | null\n    contracts: string[] | null\n    startBlockId: string | null\n    startHeight: number | null\n    heartbeatInterval: number | null\n  }\n}\n","export enum FvmErrorCode {\n  // We use -1 for unknown error in FCL because FVM defines error codes as uint16\n  // This means we have no risk of collision with FVM error codes\n  UNKNOWN_ERROR = -1,\n  // tx validation errors 1000 - 1049\n  // Deprecated: no longer in use\n  TX_VALIDATION_ERROR = 1000,\n  // Deprecated: No longer used.\n  INVALID_TX_BYTE_SIZE_ERROR = 1001,\n  // Deprecated: No longer used.\n  INVALID_REFERENCE_BLOCK_ERROR = 1002,\n  // Deprecated: No longer used.\n  EXPIRED_TRANSACTION_ERROR = 1003,\n  // Deprecated: No longer used.\n  INVALID_SCRIPT_ERROR = 1004,\n  // Deprecated: No longer used.\n  INVALID_GAS_LIMIT_ERROR = 1005,\n  INVALID_PROPOSAL_SIGNATURE_ERROR = 1006,\n  INVALID_PROPOSAL_SEQ_NUMBER_ERROR = 1007,\n  INVALID_PAYLOAD_SIGNATURE_ERROR = 1008,\n  INVALID_ENVELOPE_SIGNATURE_ERROR = 1009,\n\n  // base errors 1050 - 1100\n  // Deprecated: No longer used.\n  FVM_INTERNAL_ERROR = 1050,\n  VALUE_ERROR = 1051,\n  INVALID_ARGUMENT_ERROR = 1052,\n  INVALID_ADDRESS_ERROR = 1053,\n  INVALID_LOCATION_ERROR = 1054,\n  ACCOUNT_AUTHORIZATION_ERROR = 1055,\n  OPERATION_AUTHORIZATION_ERROR = 1056,\n  OPERATION_NOT_SUPPORTED_ERROR = 1057,\n  BLOCK_HEIGHT_OUT_OF_RANGE_ERROR = 1058,\n\n  // execution errors 1100 - 1200\n  // Deprecated: No longer used.\n  EXECUTION_ERROR = 1100,\n  CADENCE_RUNTIME_ERROR = 1101,\n  // Deprecated: No longer used.\n  ENCODING_UNSUPPORTED_VALUE = 1102,\n  STORAGE_CAPACITY_EXCEEDED = 1103,\n  // Deprecated: No longer used.\n  GAS_LIMIT_EXCEEDED_ERROR = 1104,\n  EVENT_LIMIT_EXCEEDED_ERROR = 1105,\n  LEDGER_INTERACTION_LIMIT_EXCEEDED_ERROR = 1106,\n  STATE_KEY_SIZE_LIMIT_ERROR = 1107,\n  STATE_VALUE_SIZE_LIMIT_ERROR = 1108,\n  TRANSACTION_FEE_DEDUCTION_FAILED_ERROR = 1109,\n  COMPUTATION_LIMIT_EXCEEDED_ERROR = 1110,\n  MEMORY_LIMIT_EXCEEDED_ERROR = 1111,\n  COULD_NOT_DECODE_EXECUTION_PARAMETER_FROM_STATE = 1112,\n  SCRIPT_EXECUTION_TIMED_OUT_ERROR = 1113,\n  SCRIPT_EXECUTION_CANCELLED_ERROR = 1114,\n  EVENT_ENCODING_ERROR = 1115,\n  INVALID_INTERNAL_STATE_ACCESS_ERROR = 1116,\n  // 1117 was never deployed and is free to use\n  INSUFFICIENT_PAYER_BALANCE = 1118,\n\n  // accounts errors 1200 - 1250\n  // Deprecated: No longer used.\n  ACCOUNT_ERROR = 1200,\n  ACCOUNT_NOT_FOUND_ERROR = 1201,\n  ACCOUNT_PUBLIC_KEY_NOT_FOUND_ERROR = 1202,\n  ACCOUNT_ALREADY_EXISTS_ERROR = 1203,\n  // Deprecated: No longer used.\n  FROZEN_ACCOUNT_ERROR = 1204,\n  // Deprecated: No longer used.\n  ACCOUNT_STORAGE_NOT_INITIALIZED_ERROR = 1205,\n  ACCOUNT_PUBLIC_KEY_LIMIT_ERROR = 1206,\n\n  // contract errors 1250 - 1300\n  // Deprecated: No longer used.\n  CONTRACT_ERROR = 1250,\n  CONTRACT_NOT_FOUND_ERROR = 1251,\n  // Deprecated: No longer used.\n  CONTRACT_NAMES_NOT_FOUND_ERROR = 1252,\n\n  // fvm std lib errors 1300-1400\n  EVM_EXECUTION_ERROR = 1300,\n}\n","export type Account = {\n  /**\n   * - The address of the account\n   */\n  address: string\n  /**\n   * - The FLOW balance of the account in 10^8\n   */\n  balance: number\n  /**\n   * - The code of any Cadence contracts stored in the account\n   */\n  code: number\n  /**\n   * - Any contracts deployed to this account\n   */\n  contracts: Record<string, string>\n  /**\n   * - The keys associated with the account\n   */\n  keys: Array<AccountKey>\n}\n\nexport type AccountKey = {\n  /**\n   * - The index of the key in the account\n   */\n  index: number\n  /**\n   * - The public key of the account key\n   */\n  publicKey: string\n  /**\n   * - The signature algorithm used by the key\n   */\n  signAlgo: SignatureAlgorithm\n  /**\n   * - The signature algorithm used by the key as a string\n   */\n  signAlgoString: string\n  /**\n   * - The hashing algorithm used by the key\n   */\n  hashAlgo: HashAlgorithm\n  /**\n   * - The hashing algorithm used by the key as a string\n   */\n  hashAlgoString: string\n  /**\n   * - The sequence number of the key\n   */\n  sequenceNumber: number\n  /**\n   * - The weight of the key\n   */\n  weight: number\n  /**\n   * - Whether or not the key has been revoked\n   */\n  revoked: boolean\n}\n\nexport enum SignatureAlgorithm {\n  ECDSA_P256 = 1,\n  ECDSA_secp256k1 = 2,\n  BLS_BLS12_381 = 3,\n}\n\nexport enum HashAlgorithm {\n  SHA2_256 = 1,\n  SHA2_384 = 2,\n  SHA3_256 = 3,\n  SHA3_384 = 4,\n  KMAC128_BLS_BLS12_381 = 5,\n}\n\nexport type Block = {\n  /**\n   * - The id of the block\n   */\n  id: string\n  /**\n   * - The id of the parent block\n   */\n  parentId: string\n  /**\n   * - The height of the block\n   */\n  height: number\n  /**\n   * - Time related fields\n   */\n  timestamp: string\n  /**\n   * - Contains the ids of collections included in the block\n   */\n  collectionGuarantees: Array<CollectionGuarantee>\n  /**\n   * - The details of which nodes executed and sealed the blocks\n   */\n  blockSeals: Array<BlockSeal>\n  /**\n   * - The cryptographic signature of the block\n   */\n  signatures: Array<number>\n}\nexport type CollectionGuarantee = {\n  /**\n   * - The id of the block\n   */\n  collectionId: string\n  /**\n   * - The signer ids of the block\n   */\n  signerIds: Array<object>\n}\nexport type BlockSeal = {\n  /**\n   * - The id of the block\n   */\n  blockId: string\n  /**\n   * - The execution receipt id of the block\n   */\n  executionReceiptId: string\n}\nexport type CompositeSignature = {\n  /**\n   * - A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * - FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * - Flow Address (sans prefix)\n   */\n  addr: string\n  /**\n   * - Key ID\n   */\n  keyId: number\n  /**\n   * - Signature as a hex string\n   */\n  signature: string\n}\nexport type CurrentUser = {\n  /**\n   * - The public address of the current user\n   */\n  addr?: string\n  /**\n   * - A wallet specified content identifier for user metadata\n   */\n  cid?: string\n  /**\n   * - A wallet specified time-frame for a valid session\n   */\n  expiresAt?: number\n  /**\n   * - A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * - FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * - Whether or not the current user is logged in\n   */\n  loggedIn?: boolean\n  /**\n   * - A list of trusted services that express ways of interacting with the current user's identity\n   */\n  services: Array<Service>\n}\nexport type Event = {\n  /**\n   * - ID of the block that contains the event.\n   */\n  blockId: string\n  /**\n   * - Height of the block that contains the event.\n   */\n  blockHeight: number\n  /**\n   * - The timestamp of when the block was sealed in a DateString format. eg. '2021-06-25T13:42:04.227Z'\n   */\n  blockTimestamp: string\n  /**\n   * - A string containing the event name.\n   */\n  type: string\n  /**\n   * - Can be used to query transaction information, eg. via a Flow block explorer.\n   */\n  transactionId: string\n  /**\n   * - Used to prevent replay attacks.\n   */\n  transactionIndex: number\n  /**\n   * - Used to prevent replay attacks.\n   */\n  eventIndex: number\n  /**\n   * - The data emitted from the event.\n   */\n  data: any\n}\nexport type Key = {\n  /**\n   * - Sequence number of key used by the proposer of this transaction\n   */\n  sequenceNumber: number\n  /**\n   * - The ID of the key in the account used by the proposer of this transaction\n   */\n  keyId: number\n  /**\n   * - The address of the proposer of this transaction\n   */\n  address: string\n}\nexport type Service = {\n  /**\n   * - A type identifier used internally by FCL\n   */\n  f_type: string\n  /**\n   * - FCL protocol version\n   */\n  f_vsn: string\n  /**\n   * - Service type\n   */\n  type: string\n  /**\n   * - Service method\n   */\n  method: string\n  /**\n   * - Service uid\n   */\n  uid?: string\n  /**\n   * - Service endpoint\n   */\n  endpoint: string\n  /**\n   * - Service provider object\n   */\n  provider: Provider\n\n  params: Record<string, string>\n}\nexport type Signature = {\n  /**\n   * - Sequence number of the key used to perform this signature.\n   */\n  sequenceNumber: string\n  /**\n   * - ID of the key in the account used to perform this signature.\n   */\n  keyId: number\n  /**\n   * - The signature represented as a hex string.\n   */\n  signature: string\n}\nexport type Transaction = {\n  /**\n   * - The Cadence code used to execute this transaction.\n   */\n  script: string\n  /**\n   * - The JSON-CDC encoded arguments passed in to the transaction.\n   */\n  args: Array<string>\n  /**\n   * - The reference block id for this transaction.\n   */\n  referenceBlockId: string\n  /**\n   * - The gas limit for the transaction.\n   */\n  gasLimit: number\n  /**\n   * - The key used by the proposer of this transaction.\n   */\n  proposalKey: Key\n  /**\n   * - Sequence number of the key used by the proposer of this transaction.\n   */\n  sequenceNumber: string\n  /**\n   * - The ID of the key in the account used by the proposer of this transaction.\n   */\n  keyId: number\n  /**\n   * - The address of the proposer of this transaction.\n   */\n  address: string\n  /**\n   * - Address of the payer of the transaction.\n   */\n  payer: string\n  /**\n   * - Address of the proposer of this transaction.\n   */\n  proposer: string\n  /**\n   * - Array of addresses of authorizers of this transaction.\n   */\n  authorizers: Array<string>\n  /**\n   * - The payload signatures for the transaction.\n   */\n  payloadSignatures: Array<Signature>\n  /**\n   * - The envelope signatures for the transaction.\n   */\n  envelopeSignatures: Array<Signature>\n}\nexport type TransactionStatus = {\n  /**\n   * - The ID of the Block the transaction is included in.\n   */\n  blockId: string\n  /**\n   * - The execution status of the transaction\n   */\n  status: TransactionExecutionStatus\n  /**\n   * - The status as as descriptive text (e.g. \"FINALIZED\").\n   */\n  statusString: string\n  /**\n   * - The result of the transaction, if executed (i.e. 0 for success, 1 for failure)\n   */\n  statusCode: 0 | 1\n  /**\n   * - The error message of the transaction.\n   */\n  errorMessage: string\n  /**\n   * - The events for this result.\n   */\n  events: Array<Event>\n}\n/**\n * The execution status of the transaction.\n */\nexport enum TransactionExecutionStatus {\n  UNKNOWN = 0,\n  PENDING = 1,\n  FINALIZED = 2,\n  EXECUTED = 3,\n  SEALED = 4,\n  EXPIRED = 5,\n}\n/*\n * The Provider type describes a Wallet Provider associated with a specific Service.\n */\nexport type Provider = {\n  /**\n   * The blockchain address of the Wallet provider.\n   */\n  address?: string\n  /**\n   * The name of the Wallet provider.\n   */\n  name?: string\n  /**\n   * The icon of the Wallet provider (may be a URL or a data URI).\n   */\n  icon?: string\n  /**\n   * A brief description of the Wallet provider.\n   */\n  description?: string\n  /**\n   * The preferred color to represent the Wallet provider (e.g., for UI styling).\n   */\n  color?: string\n  /**\n   * The support email address of the Wallet provider.\n   */\n  supportEmail?: string\n  /**\n   * The website URL of the Wallet provider.\n   */\n  website?: string\n  /**\n   * Indicates whether the Wallet provider is installed (if applicable).\n   */\n  is_installed?: boolean\n}\nexport type NodeVersionInfo = {\n  /**\n   * - The semver version of the node.\n   */\n  semver: string\n  /**\n   * - The commit hash of the node.\n   */\n  commit: string\n  /**\n   * - The spork id of the node.\n   */\n  sporkId: string\n  /**\n   * - The protocol version of the node.\n   */\n  protocolVersion: number\n  /**\n   * - The spork root block height of the node.\n   */\n  sporkRootBlockHeight: number\n  /**\n   * - The node root block height of the node.\n   */\n  nodeRootBlockHeight: number\n}\nexport interface StreamConnection<ChannelMap extends {[name: string]: any}> {\n  on<C extends keyof ChannelMap>(\n    channel: C,\n    listener: (data: ChannelMap[C]) => void\n  ): this\n  on(event: \"close\", listener: () => void): this\n  on(event: \"error\", listener: (err: any) => void): this\n  off<C extends keyof ChannelMap>(\n    event: C,\n    listener: (data: ChannelMap[C]) => void\n  ): this\n  off(event: \"close\", listener: () => void): this\n  off(event: \"error\", listener: (err: any) => void): this\n  close(): void\n}\n\nexport interface EventFilter {\n  eventTypes?: string[]\n  addresses?: string[]\n  contracts?: string[]\n}\n\nexport interface BlockHeartbeat {\n  blockId: string\n  blockHeight: number\n  timestamp: string\n}\n\nexport type EventStream = StreamConnection<{\n  events: Event[]\n  heartbeat: BlockHeartbeat\n}>\n\nexport * from \"./interaction\"\nexport * from \"./fvm-errors\"\n"],"names":["InteractionTag","InteractionStatus","TransactionRole","InteractionResolverKind","FvmErrorCode","SignatureAlgorithm","HashAlgorithm","TransactionExecutionStatus"],"mappings":"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"}